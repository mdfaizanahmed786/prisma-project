// defining the client in prisma
generator client {
  provider = "prisma-client-js"
}

// defining the datasource or database where we provide the url and the provider
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// creating the model for the user
model User {
  // id Int @id @default(autoincrement()) avoid this
  id        String   @id @default(cuid())
 
  firstName String
  lastName  String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // we @relation to define the relation between the models and "HouseOwner" is the label for uniquely identifying the relation
  house     House[]  @relation("HouseOwner")
  builtBy     House[]  @relation("HouseBuilder")
}

model House {
  // id should have always string property for extra security
  id      String @id @default(cuid())
  house   User   @relation("HouseOwner",fields: [userId], references: [id])
  userId String
   address   String   @unique
  // below is for optional field
  wifiPassword String?
  builtBy User @relation("HouseBuilder",fields: [builtById], references: [id])
  builtById String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // indexes are used to make the search faster
  @@index([userId])
  @@index([builtById])
}

// after creating a model, we need to run yarn or npx prisma generate to tell client to use this kind of schema
// yarn prisma db push :  this command will generate the tables/fields in the database as in the model
// yarn prisma generate :to apply changes locally
// yarn prisma studio : this command will open the prisma studio where we can see the tables and the data in the tables
// yarn prisma format : this command will format the schema.prisma file






// What are cuid?
// cuid is a unique id generator
// How is it different from uuid?
// cuid is a unique id generator that is designed to be used in a distributed environment
